import numpy as np

# MATRIX_DTYPE = np.float64
MATRIX_DTYPE = np.float64
BENCHMARK_FILE = "benchmark.csv"


"""
These matrices are in the form MATRIX_<LETTER>_<NUMROW>_<NUMCOL>
"""
# 3x2 grid dimensions 3,6,4
MATRIX_A_3_6 = np.array(
    [
        [1.0, -4.0, -9.0, -2.0, 0.0, -5.0],
        [-2.0, -10.0, 4.0, 9.0, -7.0, -6.0],
        [3.0, -10.0, -2.0, -4.0, -5.0, 3.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_B_6_4 = np.array(
    [
        [5.0, 3.0, -7.0, 6.0],
        [-6.0, -2.0, -1.0, 1.0],
        [-4.0, 9.0, 7.0, 4.0],
        [4.0, -1.0, -9.0, 1.0],
        [2.0, 6.0, -7.0, -5.0],
        [4.0, -7.0, 0.0, -8.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_C_3_4 = np.zeros((3, 4), MATRIX_DTYPE)

# 4x3 grid of processors dimensions 4,12,3
MATRIX_A_4_12 = np.array(
    [
        [-5.0, 1.0, 2.0, -2.0, -1.0, 1.0, -5.0, 5.0, -10.0, 6.0, -9.0, 2.0],
        [-3.0, 3.0, -4.0, 8.0, -5.0, 8.0, 1.0, 0.0, 4.0, 8.0, -6.0, -1.0],
        [7.0, -10.0, 3.0, -1.0, -1.0, -3.0, -9.0, -10.0, 7.0, -2.0, 3.0, 9.0],
        [5.0, 0.0, -2.0, -3.0, -7.0, -4.0, 7.0, -7.0, -6.0, 7.0, 1.0, 2.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_B_12_3 = np.array(
    [
        [-5.0, 1.0, 2.0],
        [-2.0, -1.0, 1.0],
        [-5.0, 5.0, -10.0],
        [6.0, -9.0, 2.0],
        [-3.0, 3.0, -4.0],
        [8.0, -5.0, 8.0],
        [1.0, 0.0, 4.0],
        [8.0, -6.0, -1.0],
        [7.0, -10.0, 3.0],
        [-1.0, -1.0, -3.0],
        [-9.0, -10.0, 7.0],
        [-2.0, 3.0, 9.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_C_4_3 = np.zeros((4, 3), MATRIX_DTYPE)

# 3x2 grid of processors dimensions 6,6,4
MATRIX_A_6_6 = np.array(
    [
        [-5.0, 1.0, 2.0, -2.0, -1.0, 1.0],
        [-5.0, 5.0, -10.0, 6.0, -9.0, 2.0],
        [-3.0, 3.0, -4.0, 8.0, -5.0, 8.0],
        [1.0, 0.0, 4.0, 8.0, -6.0, -1.0],
        [7.0, -10.0, 3.0, -1.0, -1.0, -3.0],
        [-9.0, -10.0, 7.0, -2.0, 3.0, 9.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_B_6_4 = np.array(
    [
        [5.0, 0.0, -2.0, -3.0],
        [-7.0, -4.0, 7.0, -7.0],
        [-6.0, 7.0, 1.0, 2.0],
        [6.0, 3.0, 9.0, -1.0],
        [8.0, 5.0, -10.0, -6.0],
        [5.0, -8.0, -3.0, -2.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_C_6_4 = np.zeros((6, 4), dtype=MATRIX_DTYPE)

# 3x2 grid of processors dimensions 3,12,4
MATRIX_A_3_12 = np.array(
    [
        [-5.0, 1.0, 2.0, -2.0, -1.0, 1.0, -5.0, 5.0, -10.0, 6.0, -9.0, 2.0],
        [-3.0, 3.0, -4.0, 8.0, -5.0, 8.0, 1.0, 0.0, 4.0, 8.0, -6.0, -1.0],
        [7.0, -10.0, 3.0, -1.0, -1.0, -3.0, -9.0, -10.0, 7.0, -2.0, 3.0, 9.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_B_12_4 = np.array(
    [
        [5.0, 0.0, -2.0, -3.0],
        [-7.0, -4.0, 7.0, -7.0],
        [-6.0, 7.0, 1.0, 2.0],
        [6.0, 3.0, 9.0, -1.0],
        [8.0, 5.0, -10.0, -6.0],
        [5.0, -8.0, -3.0, -2.0],
        [-1.0, -7.0, -3.0, -6.0],
        [-5.0, 9.0, -4.0, -2.0],
        [-10.0, -8.0, 0.0, 5.0],
        [5.0, -3.0, 9.0, 0.0],
        [4.0, -10.0, -9.0, 7.0],
        [3.0, -7.0, -10.0, 3.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_C_3_4 = np.zeros((3, 4), dtype=MATRIX_DTYPE)

# 3x3 grid of processors dimensions 3,3,3
MATRIX_A_3_3 = np.array(
    [
        [-5.0, 1.0, 2.0],
        [-2.0, -1.0, 1.0],
        [-5.0, 5.0, -10.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_B_3_3 = np.array(
    [
        [6.0, -9.0, 2.0],
        [-3.0, 3.0, -4.0],
        [8.0, -5.0, 8.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_C_3_3 = np.zeros((3, 3), dtype=MATRIX_DTYPE)

MATRIX_C_2_3 = np.zeros((2, 3), dtype=MATRIX_DTYPE)


# used in summa
MATRIX_A_9_9 = np.array(
    [
        [-4.0, 9.0, 4.0, 0.0, -3.0, -4.0, 8.0, 0.0, 0.0],
        [-7.0, -3.0, -8.0, -9.0, 1.0, -5.0, -9.0, -10.0, 1.0],
        [1.0, 6.0, -1.0, 5.0, 4.0, 4.0, 8.0, 1.0, 9.0],
        [-8.0, -6.0, 8.0, -4.0, -2.0, -4.0, 7.0, -7.0, 3.0],
        [7.0, -2.0, -9.0, 9.0, 4.0, -4.0, 1.0, -3.0, 4.0],
        [-8.0, 3.0, 6.0, -7.0, 7.0, -3.0, -7.0, -9.0, -5.0],
        [-1.0, -7.0, 7.0, 1.0, -9.0, -1.0, -7.0, 3.0, 5.0],
        [4.0, -3.0, 3.0, -3.0, 5.0, 2.0, 7.0, 4.0, 2.0],
        [-2.0, 4.0, 2.0, -10.0, -4.0, -2.0, -10.0, 1.0, -3.0],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_B_9_9 = np.array(
    [
        [7.0, -2.0, -4.0, 9.0, 4.0, 0.0, -2.0, 4.0, -4.0],
        [-7.0, -6.0, -10.0, 3.0, -5.0, -5.0, 5.0, 2.0, 1.0],
        [-2.0, -8.0, -5.0, -5.0, 3.0, 5.0, 5.0, -2.0, -1.0],
        [1.0, -1.0, -3.0, -1.0, -10.0, -6.0, 4.0, 7.0, 5.0],
        [8.0, -8.0, -5.0, 9.0, -6.0, 5.0, -7.0, 4.0, 4.0],
        [-9.0, 6.0, 5.0, 2.0, -8.0, 3.0, -7.0, -1.0, 8.0],
        [-2.0, 1.0, 1.0, 5.0, 0.0, -6.0, -1.0, 5.0, 6.0],
        [0.0, -4.0, -6.0, -2.0, -5.0, -2.0, 1.0, 8.0, 3.0],
        [-10.0, 5.0, -7.0, 3.0, 0.0, 3.0, -2.0, 8.0, -1.0],
    ],
    dtype=MATRIX_DTYPE,
)


MATRIX_C_9_9 = np.zeros((9, 9), dtype=MATRIX_DTYPE)


# from gemm1d util
MATRIX_A_16_8 = np.array(
    [
        [-5, -10, 5, -3, 6, -10, 5, -8],
        [-4, -2, -4, -10, 6, 0, -7, 2],
        [-10, 1, 3, -4, 2, -7, -7, -6],
        [-9, 3, 8, -10, 5, -7, 5, 7],
        [-9, -4, 2, 1, 6, 6, -1, -1],
        [8, 4, 0, 3, 7, -1, 5, 5],
        [-2, 8, 0, -6, -10, 9, -2, -5],
        [-4, -10, -1, -6, 5, -2, 3, -2],
        [-6, 6, 6, -4, 2, 5, 0, 6],
        [-10, -9, -9, -6, 8, -3, 1, -8],
        [6, 8, 6, -5, -9, -1, -4, 1],
        [-7, -6, 4, 1, -5, 8, -10, -8],
        [-5, 9, -7, -8, -1, 1, 0, -8],
        [-8, 9, -2, 1, -1, 5, 6, -5],
        [-2, 4, -5, 3, -3, -8, 2, 2],
        [-7, 4, 2, -10, -1, 3, -5, 5],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_B_8_4 = np.array(
    [
        [0, 8, 8, 5],
        [-7, 4, 6, 3],
        [-7, -5, 5, -7],
        [-3, 5, 8, -3],
        [8, 9, -5, 9],
        [5, 2, 5, 9],
        [-2, 1, 5, 7],
        [6, -6, 2, -2],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_C_16_4 = np.zeros(
    (16, 4), dtype=MATRIX_DTYPE
)  # Initialize MATRIX_C_16_4 with zeros

EXPECTED_MATRIX_C_16_4 = np.array(
    [
        [-16, -33, -170, -66],
        [146, -35, -205, 33],
        [-57, -78, -183, -138],
        [-10, -156, -115, -59],
        [85, -22, -85, 29],
        [34, 131, 107, 122],
        [-99, -58, 59, 19],
        [107, -41, -169, 27],
        [5, -82, 13, 9],
        [143, 14, -293, 72],
        [-146, -68, 108, -93],
        [-17, -86, -65, -111],
        [-41, 32, -91, 91],
        [-77, 24, 38, 86],
        [-58, -13, -4, -61],
        [35, -138, -97, -34],
    ],
    dtype=MATRIX_DTYPE,
)

# idk where these came from just dumped in util
MATRIX_A_16_8 = np.array(
    [
        [-5, -10, 5, -3, 6, -10, 5, -8],
        [-4, -2, -4, -10, 6, 0, -7, 2],
        [-10, 1, 3, -4, 2, -7, -7, -6],
        [-9, 3, 8, -10, 5, -7, 5, 7],
        [-9, -4, 2, 1, 6, 6, -1, -1],
        [8, 4, 0, 3, 7, -1, 5, 5],
        [-2, 8, 0, -6, -10, 9, -2, -5],
        [-4, -10, -1, -6, 5, -2, 3, -2],
        [-6, 6, 6, -4, 2, 5, 0, 6],
        [-10, -9, -9, -6, 8, -3, 1, -8],
        [6, 8, 6, -5, -9, -1, -4, 1],
        [-7, -6, 4, 1, -5, 8, -10, -8],
        [-5, 9, -7, -8, -1, 1, 0, -8],
        [-8, 9, -2, 1, -1, 5, 6, -5],
        [-2, 4, -5, 3, -3, -8, 2, 2],
        [-7, 4, 2, -10, -1, 3, -5, 5],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_B_8_4 = np.array(
    [
        [0, 8, 8, 5],
        [-7, 4, 6, 3],
        [-7, -5, 5, -7],
        [-3, 5, 8, -3],
        [8, 9, -5, 9],
        [5, 2, 5, 9],
        [-2, 1, 5, 7],
        [6, -6, 2, -2],
    ],
    dtype=MATRIX_DTYPE,
)

MATRIX_C_16_4 = np.zeros(
    (16, 4), dtype=MATRIX_DTYPE
)  # Initialize MATRIX_C_16_4 with zeros

EXPECTED_MATRIX_C_16_4 = np.array(
    [
        [-16, -33, -170, -66],
        [146, -35, -205, 33],
        [-57, -78, -183, -138],
        [-10, -156, -115, -59],
        [85, -22, -85, 29],
        [34, 131, 107, 122],
        [-99, -58, 59, 19],
        [107, -41, -169, 27],
        [5, -82, 13, 9],
        [143, 14, -293, 72],
        [-146, -68, 108, -93],
        [-17, -86, -65, -111],
        [-41, 32, -91, 91],
        [-77, 24, 38, 86],
        [-58, -13, -4, -61],
        [35, -138, -97, -34],
    ],
    dtype=MATRIX_DTYPE,
)
